// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: client.sql

package db

import (
	"context"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients
(
    first_name,
    last_name,
    country_id
)
VALUES ($1, $2, $3)
RETURNING id, first_name, last_name, created_at, active, country_id
`

type CreateClientParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	CountryID int64  `json:"country_id"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.queryRow(ctx, q.createClientStmt, createClient, arg.FirstName, arg.LastName, arg.CountryID)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.Active,
		&i.CountryID,
	)
	return i, err
}

const getClient = `-- name: GetClient :one
SELECT id, first_name, last_name, created_at, active, country_id FROM clients
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClient(ctx context.Context, id int64) (Client, error) {
	row := q.queryRow(ctx, q.getClientStmt, getClient, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.Active,
		&i.CountryID,
	)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT id, first_name, last_name, created_at, active, country_id FROM clients
LIMIT $1
OFFSET $2
`

type ListClientsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListClients(ctx context.Context, arg ListClientsParams) ([]Client, error) {
	rows, err := q.query(ctx, q.listClientsStmt, listClients, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
			&i.Active,
			&i.CountryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :one
UPDATE clients
SET 
    first_name = $2,
    last_name = $3,
    country_id = $4,
    active = $5
WHERE id = $1
RETURNING id, first_name, last_name, created_at, active, country_id
`

type UpdateClientParams struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	CountryID int64  `json:"country_id"`
	Active    bool   `json:"active"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (Client, error) {
	row := q.queryRow(ctx, q.updateClientStmt, updateClient,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.CountryID,
		arg.Active,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.Active,
		&i.CountryID,
	)
	return i, err
}
