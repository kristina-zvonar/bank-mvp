// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: account.sql

package db

import (
	"context"

	"github.com/shopspring/decimal"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE accounts
SET 
    balance = balance + $1
WHERE id = $2
RETURNING id, balance, currency, active, locked, created_at, client_id
`

type AddAccountBalanceParams struct {
	Amount decimal.Decimal `json:"amount"`
	ID     int64           `json:"id"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error) {
	row := q.queryRow(ctx, q.addAccountBalanceStmt, addAccountBalance, arg.Amount, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Balance,
		&i.Currency,
		&i.Active,
		&i.Locked,
		&i.CreatedAt,
		&i.ClientID,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts
(
    balance,
    currency,
    client_id
)
VALUES ($1, $2, $3)
RETURNING id, balance, currency, active, locked, created_at, client_id
`

type CreateAccountParams struct {
	Balance  decimal.Decimal `json:"balance"`
	Currency string          `json:"currency"`
	ClientID int64           `json:"client_id"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.queryRow(ctx, q.createAccountStmt, createAccount, arg.Balance, arg.Currency, arg.ClientID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Balance,
		&i.Currency,
		&i.Active,
		&i.Locked,
		&i.CreatedAt,
		&i.ClientID,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, balance, currency, active, locked, created_at, client_id FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.queryRow(ctx, q.getAccountStmt, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Balance,
		&i.Currency,
		&i.Active,
		&i.Locked,
		&i.CreatedAt,
		&i.ClientID,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, balance, currency, active, locked, created_at, client_id FROM accounts
WHERE id = $1 LIMIT 1 
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (Account, error) {
	row := q.queryRow(ctx, q.getAccountForUpdateStmt, getAccountForUpdate, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Balance,
		&i.Currency,
		&i.Active,
		&i.Locked,
		&i.CreatedAt,
		&i.ClientID,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, balance, currency, active, locked, created_at, client_id FROM accounts
WHERE client_id = $1
LIMIT $2
OFFSET $3
`

type ListAccountsParams struct {
	ClientID int64 `json:"client_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.query(ctx, q.listAccountsStmt, listAccounts, arg.ClientID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Balance,
			&i.Currency,
			&i.Active,
			&i.Locked,
			&i.CreatedAt,
			&i.ClientID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET
    balance = $2,
    active = $3,
    locked = $4
WHERE id = $1
RETURNING id, balance, currency, active, locked, created_at, client_id
`

type UpdateAccountParams struct {
	ID      int64           `json:"id"`
	Balance decimal.Decimal `json:"balance"`
	Active  bool            `json:"active"`
	Locked  bool            `json:"locked"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.queryRow(ctx, q.updateAccountStmt, updateAccount,
		arg.ID,
		arg.Balance,
		arg.Active,
		arg.Locked,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Balance,
		&i.Currency,
		&i.Active,
		&i.Locked,
		&i.CreatedAt,
		&i.ClientID,
	)
	return i, err
}
