// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addAccountBalanceStmt, err = db.PrepareContext(ctx, addAccountBalance); err != nil {
		return nil, fmt.Errorf("error preparing query AddAccountBalance: %w", err)
	}
	if q.createAccountStmt, err = db.PrepareContext(ctx, createAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAccount: %w", err)
	}
	if q.createCardStmt, err = db.PrepareContext(ctx, createCard); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCard: %w", err)
	}
	if q.createClientStmt, err = db.PrepareContext(ctx, createClient); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClient: %w", err)
	}
	if q.createServiceStmt, err = db.PrepareContext(ctx, createService); err != nil {
		return nil, fmt.Errorf("error preparing query CreateService: %w", err)
	}
	if q.createTransactionStmt, err = db.PrepareContext(ctx, createTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransaction: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteServiceStmt, err = db.PrepareContext(ctx, deleteService); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteService: %w", err)
	}
	if q.getAccountStmt, err = db.PrepareContext(ctx, getAccount); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccount: %w", err)
	}
	if q.getAccountForUpdateStmt, err = db.PrepareContext(ctx, getAccountForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountForUpdate: %w", err)
	}
	if q.getCardStmt, err = db.PrepareContext(ctx, getCard); err != nil {
		return nil, fmt.Errorf("error preparing query GetCard: %w", err)
	}
	if q.getClientStmt, err = db.PrepareContext(ctx, getClient); err != nil {
		return nil, fmt.Errorf("error preparing query GetClient: %w", err)
	}
	if q.getServiceStmt, err = db.PrepareContext(ctx, getService); err != nil {
		return nil, fmt.Errorf("error preparing query GetService: %w", err)
	}
	if q.getTransactionStmt, err = db.PrepareContext(ctx, getTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransaction: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.listAccountsStmt, err = db.PrepareContext(ctx, listAccounts); err != nil {
		return nil, fmt.Errorf("error preparing query ListAccounts: %w", err)
	}
	if q.listCardsStmt, err = db.PrepareContext(ctx, listCards); err != nil {
		return nil, fmt.Errorf("error preparing query ListCards: %w", err)
	}
	if q.listClientsStmt, err = db.PrepareContext(ctx, listClients); err != nil {
		return nil, fmt.Errorf("error preparing query ListClients: %w", err)
	}
	if q.listServicesStmt, err = db.PrepareContext(ctx, listServices); err != nil {
		return nil, fmt.Errorf("error preparing query ListServices: %w", err)
	}
	if q.listTransactionsStmt, err = db.PrepareContext(ctx, listTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query ListTransactions: %w", err)
	}
	if q.updateAccountStmt, err = db.PrepareContext(ctx, updateAccount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccount: %w", err)
	}
	if q.updateCardStmt, err = db.PrepareContext(ctx, updateCard); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCard: %w", err)
	}
	if q.updateClientStmt, err = db.PrepareContext(ctx, updateClient); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClient: %w", err)
	}
	if q.updateServiceStmt, err = db.PrepareContext(ctx, updateService); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateService: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addAccountBalanceStmt != nil {
		if cerr := q.addAccountBalanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addAccountBalanceStmt: %w", cerr)
		}
	}
	if q.createAccountStmt != nil {
		if cerr := q.createAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAccountStmt: %w", cerr)
		}
	}
	if q.createCardStmt != nil {
		if cerr := q.createCardStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCardStmt: %w", cerr)
		}
	}
	if q.createClientStmt != nil {
		if cerr := q.createClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClientStmt: %w", cerr)
		}
	}
	if q.createServiceStmt != nil {
		if cerr := q.createServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createServiceStmt: %w", cerr)
		}
	}
	if q.createTransactionStmt != nil {
		if cerr := q.createTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransactionStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteServiceStmt != nil {
		if cerr := q.deleteServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteServiceStmt: %w", cerr)
		}
	}
	if q.getAccountStmt != nil {
		if cerr := q.getAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountStmt: %w", cerr)
		}
	}
	if q.getAccountForUpdateStmt != nil {
		if cerr := q.getAccountForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountForUpdateStmt: %w", cerr)
		}
	}
	if q.getCardStmt != nil {
		if cerr := q.getCardStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCardStmt: %w", cerr)
		}
	}
	if q.getClientStmt != nil {
		if cerr := q.getClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientStmt: %w", cerr)
		}
	}
	if q.getServiceStmt != nil {
		if cerr := q.getServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getServiceStmt: %w", cerr)
		}
	}
	if q.getTransactionStmt != nil {
		if cerr := q.getTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.listAccountsStmt != nil {
		if cerr := q.listAccountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAccountsStmt: %w", cerr)
		}
	}
	if q.listCardsStmt != nil {
		if cerr := q.listCardsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCardsStmt: %w", cerr)
		}
	}
	if q.listClientsStmt != nil {
		if cerr := q.listClientsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClientsStmt: %w", cerr)
		}
	}
	if q.listServicesStmt != nil {
		if cerr := q.listServicesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listServicesStmt: %w", cerr)
		}
	}
	if q.listTransactionsStmt != nil {
		if cerr := q.listTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTransactionsStmt: %w", cerr)
		}
	}
	if q.updateAccountStmt != nil {
		if cerr := q.updateAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountStmt: %w", cerr)
		}
	}
	if q.updateCardStmt != nil {
		if cerr := q.updateCardStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCardStmt: %w", cerr)
		}
	}
	if q.updateClientStmt != nil {
		if cerr := q.updateClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClientStmt: %w", cerr)
		}
	}
	if q.updateServiceStmt != nil {
		if cerr := q.updateServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateServiceStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                      DBTX
	tx                      *sql.Tx
	addAccountBalanceStmt   *sql.Stmt
	createAccountStmt       *sql.Stmt
	createCardStmt          *sql.Stmt
	createClientStmt        *sql.Stmt
	createServiceStmt       *sql.Stmt
	createTransactionStmt   *sql.Stmt
	createUserStmt          *sql.Stmt
	deleteServiceStmt       *sql.Stmt
	getAccountStmt          *sql.Stmt
	getAccountForUpdateStmt *sql.Stmt
	getCardStmt             *sql.Stmt
	getClientStmt           *sql.Stmt
	getServiceStmt          *sql.Stmt
	getTransactionStmt      *sql.Stmt
	getUserStmt             *sql.Stmt
	listAccountsStmt        *sql.Stmt
	listCardsStmt           *sql.Stmt
	listClientsStmt         *sql.Stmt
	listServicesStmt        *sql.Stmt
	listTransactionsStmt    *sql.Stmt
	updateAccountStmt       *sql.Stmt
	updateCardStmt          *sql.Stmt
	updateClientStmt        *sql.Stmt
	updateServiceStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                      tx,
		tx:                      tx,
		addAccountBalanceStmt:   q.addAccountBalanceStmt,
		createAccountStmt:       q.createAccountStmt,
		createCardStmt:          q.createCardStmt,
		createClientStmt:        q.createClientStmt,
		createServiceStmt:       q.createServiceStmt,
		createTransactionStmt:   q.createTransactionStmt,
		createUserStmt:          q.createUserStmt,
		deleteServiceStmt:       q.deleteServiceStmt,
		getAccountStmt:          q.getAccountStmt,
		getAccountForUpdateStmt: q.getAccountForUpdateStmt,
		getCardStmt:             q.getCardStmt,
		getClientStmt:           q.getClientStmt,
		getServiceStmt:          q.getServiceStmt,
		getTransactionStmt:      q.getTransactionStmt,
		getUserStmt:             q.getUserStmt,
		listAccountsStmt:        q.listAccountsStmt,
		listCardsStmt:           q.listCardsStmt,
		listClientsStmt:         q.listClientsStmt,
		listServicesStmt:        q.listServicesStmt,
		listTransactionsStmt:    q.listTransactionsStmt,
		updateAccountStmt:       q.updateAccountStmt,
		updateCardStmt:          q.updateCardStmt,
		updateClientStmt:        q.updateClientStmt,
		updateServiceStmt:       q.updateServiceStmt,
	}
}
