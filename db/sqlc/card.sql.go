// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: card.sql

package db

import (
	"context"
	"time"
)

const createCard = `-- name: CreateCard :one
INSERT INTO cards
(
    number,
    valid_through,
    cvc,
    account_id
)
VALUES($1, $2, $3, $4)
RETURNING id, number, valid_through, cvc, active, account_id
`

type CreateCardParams struct {
	Number       string    `json:"number"`
	ValidThrough time.Time `json:"valid_through"`
	Cvc          string    `json:"cvc"`
	AccountID    int64     `json:"account_id"`
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) (Card, error) {
	row := q.queryRow(ctx, q.createCardStmt, createCard,
		arg.Number,
		arg.ValidThrough,
		arg.Cvc,
		arg.AccountID,
	)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.ValidThrough,
		&i.Cvc,
		&i.Active,
		&i.AccountID,
	)
	return i, err
}

const getCard = `-- name: GetCard :one
SELECT id, number, valid_through, cvc, active, account_id FROM cards
WHERE 
    number = $1 AND valid_through = $2 and cvc = $3 and active = true
LIMIT 1
`

type GetCardParams struct {
	Number       string    `json:"number"`
	ValidThrough time.Time `json:"valid_through"`
	Cvc          string    `json:"cvc"`
}

func (q *Queries) GetCard(ctx context.Context, arg GetCardParams) (Card, error) {
	row := q.queryRow(ctx, q.getCardStmt, getCard, arg.Number, arg.ValidThrough, arg.Cvc)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.ValidThrough,
		&i.Cvc,
		&i.Active,
		&i.AccountID,
	)
	return i, err
}

const listCards = `-- name: ListCards :many
SELECT id, number, valid_through, cvc, active, account_id FROM cards
LIMIT $1
OFFSET $2
`

type ListCardsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCards(ctx context.Context, arg ListCardsParams) ([]Card, error) {
	rows, err := q.query(ctx, q.listCardsStmt, listCards, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Card{}
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.Number,
			&i.ValidThrough,
			&i.Cvc,
			&i.Active,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCard = `-- name: UpdateCard :one
UPDATE cards
SET 
    active = $2
WHERE id = $1
RETURNING id, number, valid_through, cvc, active, account_id
`

type UpdateCardParams struct {
	ID     int64 `json:"id"`
	Active bool  `json:"active"`
}

func (q *Queries) UpdateCard(ctx context.Context, arg UpdateCardParams) (Card, error) {
	row := q.queryRow(ctx, q.updateCardStmt, updateCard, arg.ID, arg.Active)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.ValidThrough,
		&i.Cvc,
		&i.Active,
		&i.AccountID,
	)
	return i, err
}
