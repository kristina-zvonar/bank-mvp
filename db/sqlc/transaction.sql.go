// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: transaction.sql

package db

import (
	"context"
	"database/sql"

	"github.com/shopspring/decimal"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions
(
    amount,
    source_account_id,
    dest_account_id,
    ext_source_account_id,
    ext_dest_account_id,
    category,
    service_id
)
VALUES($1, $2, $3, $4, $5, $6, $7)
RETURNING id, amount, source_account_id, dest_account_id, ext_source_account_id, ext_dest_account_id, category, service_id
`

type CreateTransactionParams struct {
	Amount             decimal.Decimal `json:"amount"`
	SourceAccountID    sql.NullInt64   `json:"source_account_id"`
	DestAccountID      sql.NullInt64   `json:"dest_account_id"`
	ExtSourceAccountID sql.NullString  `json:"ext_source_account_id"`
	ExtDestAccountID   sql.NullString  `json:"ext_dest_account_id"`
	Category           int32           `json:"category"`
	ServiceID          sql.NullInt64   `json:"service_id"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.queryRow(ctx, q.createTransactionStmt, createTransaction,
		arg.Amount,
		arg.SourceAccountID,
		arg.DestAccountID,
		arg.ExtSourceAccountID,
		arg.ExtDestAccountID,
		arg.Category,
		arg.ServiceID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.SourceAccountID,
		&i.DestAccountID,
		&i.ExtSourceAccountID,
		&i.ExtDestAccountID,
		&i.Category,
		&i.ServiceID,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, amount, source_account_id, dest_account_id, ext_source_account_id, ext_dest_account_id, category, service_id FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.queryRow(ctx, q.getTransactionStmt, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.SourceAccountID,
		&i.DestAccountID,
		&i.ExtSourceAccountID,
		&i.ExtDestAccountID,
		&i.Category,
		&i.ServiceID,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, amount, source_account_id, dest_account_id, ext_source_account_id, ext_dest_account_id, category, service_id FROM transactions
LIMIT $1 
OFFSET $2
`

type ListTransactionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]Transaction, error) {
	rows, err := q.query(ctx, q.listTransactionsStmt, listTransactions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.SourceAccountID,
			&i.DestAccountID,
			&i.ExtSourceAccountID,
			&i.ExtDestAccountID,
			&i.Category,
			&i.ServiceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
