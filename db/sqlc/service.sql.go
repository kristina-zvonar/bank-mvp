// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: service.sql

package db

import (
	"context"
)

const createService = `-- name: CreateService :one
INSERT INTO services
(
    name, 
    type
)
VALUES($1, $2)
RETURNING id, name, type
`

type CreateServiceParams struct {
	Name string `json:"name"`
	Type int32  `json:"type"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.queryRow(ctx, q.createServiceStmt, createService, arg.Name, arg.Type)
	var i Service
	err := row.Scan(&i.ID, &i.Name, &i.Type)
	return i, err
}

const deleteService = `-- name: DeleteService :exec
DELETE FROM services
WHERE id = $1
`

func (q *Queries) DeleteService(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteServiceStmt, deleteService, id)
	return err
}

const getService = `-- name: GetService :one
SELECT id, name, type FROM services
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetService(ctx context.Context, id int64) (Service, error) {
	row := q.queryRow(ctx, q.getServiceStmt, getService, id)
	var i Service
	err := row.Scan(&i.ID, &i.Name, &i.Type)
	return i, err
}

const listServices = `-- name: ListServices :many
SELECT id, name, type FROM services
LIMIT $1
OFFSET $2
`

type ListServicesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListServices(ctx context.Context, arg ListServicesParams) ([]Service, error) {
	rows, err := q.query(ctx, q.listServicesStmt, listServices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(&i.ID, &i.Name, &i.Type); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateService = `-- name: UpdateService :one
UPDATE services
SET
    name = $2,
    type = $3
WHERE id = $1
RETURNING id, name, type
`

type UpdateServiceParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
	Type int32  `json:"type"`
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) (Service, error) {
	row := q.queryRow(ctx, q.updateServiceStmt, updateService, arg.ID, arg.Name, arg.Type)
	var i Service
	err := row.Scan(&i.ID, &i.Name, &i.Type)
	return i, err
}
